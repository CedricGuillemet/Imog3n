static const uint8_t SDF_DepthId_fs_mtl[4028] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x62, // FSH.o.><.......b
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x01, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xcc, // oundMin..P......
	0xcc, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x01, 0x60, 0x00, // ..boundRatio..`.
	0x01, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x11, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // .......SDFSample
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, // rSampler........
	0xcc, 0xcc, 0x11, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x54, 0x65, 0x78, // ...SDFSamplerTex
	0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x0a, 0x62, // ture...........b
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x01, 0x70, 0x00, 0x01, 0x00, 0x00, // oundScale..p....
	0x00, 0xcc, 0xcc, 0x09, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x01, 0x00, // ....viewInfos...
	0x00, 0x01, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, // ........cameraVi
	0x65, 0x77, 0x14, 0x01, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x0a, 0x53, 0x44, 0x46, // ew...........SDF
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, // Sampler.........
	0xcc, 0xf3, 0x0e, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, // .....#include <m
	0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, // etal_stdlib>.#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, // clude <simd/simd
	0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, // .h>..using names
	0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, // pace metal;..str
	0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // uct _Global.{.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, //   float4 viewInf
	0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, // os;.    float4x4
	0x20, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x20, 0x20, 0x20, //  cameraView;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, //  float4 boundMin
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x6f, 0x75, // ;.    float4 bou
	0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ndRatio;.    flo
	0x61, 0x74, 0x34, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x3b, 0x0a, // at4 boundScale;.
	0x7d, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, // };..constant flo
	0x61, 0x74, 0x32, 0x20, 0x5f, 0x39, 0x30, 0x37, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x0a, // at2 _907 = {};..
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, // struct xlatMtlMa
	0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // in_out.{.    flo
	0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // at4 bgfx_FragDat
	0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // a0 [[color(0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // .};..struct xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // MtlMain_in.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, //  float2 v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, // rd0 [[user(locn0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, // )]];.};..fragmen
	0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, // t xlatMtlMain_ou
	0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, // t xlatMtlMain(xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, // atMtlMain_in in 
	0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, // [[stage_in]], co
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, // nstant _Global& 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, // _mtl_u [[buffer(
	0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x64, 0x3c, // 0)]], texture3d<
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // float> SDFSample
	0x72, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, // , sampler SDFSam
	0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, // plerSampler [[sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // mpler(0)]]).{.  
	0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, //   xlatMtlMain_ou
	0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // t out = {};.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x34, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x5f, // float3 _446 = (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x65, 0x77, // mtl_u.cameraView
	0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, //  * float4(0.0, 0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, // .0, 0.0, 1.0)).x
	0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // yz;.    float3 _
	0x34, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x63, 0x61, // 466 = (_mtl_u.ca
	0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x65, 0x77, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // meraView * float
	0x34, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x66, 0x6c, 0x6f, 0x61, // 4(normalize(floa
	0x74, 0x33, 0x28, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // t3(((1.0 - in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x32, // texcoord0.x) * 2
	0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0) - 1.0, (0.5 
	0x2d, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // - in.v_texcoord0
	0x2e, 0x79, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x76, 0x69, // .y) * (_mtl_u.vi
	0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, // ewInfos.x * 2.0)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, // , 1.0)), 0.0)).x
	0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, // yz;.    float2 _
	0x39, 0x30, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 903;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // {.        float3
	0x20, 0x5f, 0x35, 0x32, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, //  _526 = (_mtl_u.
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, // boundScale * 0.5
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // ).xyz;.        f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // loat2 _897;.    
	0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //     do.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // .            flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at3 _582 = float
	0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x5f, 0x34, 0x36, 0x36, 0x3b, 0x0a, 0x20, // 3(1.0) / _466;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x33, 0x20, 0x5f, 0x35, 0x38, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x38, 0x32, 0x20, 0x2a, 0x20, // 3 _585 = _582 * 
	0x28, 0x5f, 0x34, 0x34, 0x36, 0x20, 0x2d, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // (_446 - (_mtl_u.
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x5f, // boundMin.xyz + _
	0x35, 0x32, 0x36, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 526));.         
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x38, 0x39, 0x20, 0x3d, //    float3 _589 =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x5f, 0x35, 0x38, 0x32, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x35, 0x32, //  abs(_582) * _52
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // 6;.            f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x2d, 0x5f, // loat3 _593 = (-_
	0x35, 0x38, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x35, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 585) - _589;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, //          float3 
	0x5f, 0x35, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x28, 0x2d, 0x5f, 0x35, 0x38, 0x35, 0x29, 0x20, 0x2b, // _597 = (-_585) +
	0x20, 0x5f, 0x35, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _589;.         
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x30, 0x35, 0x20, 0x3d, 0x20, //    float _605 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // fast::max(fast::
	0x6d, 0x61, 0x78, 0x28, 0x5f, 0x35, 0x39, 0x33, 0x2e, 0x78, 0x2c, 0x20, 0x5f, 0x35, 0x39, 0x33, // max(_593.x, _593
	0x2e, 0x79, 0x29, 0x2c, 0x20, 0x5f, 0x35, 0x39, 0x33, 0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, // .y), _593.z);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //           float 
	0x5f, 0x36, 0x31, 0x33, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // _613 = fast::min
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x5f, 0x35, 0x39, 0x37, 0x2e, // (fast::min(_597.
	0x78, 0x2c, 0x20, 0x5f, 0x35, 0x39, 0x37, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x5f, 0x35, 0x39, 0x37, // x, _597.y), _597
	0x2e, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .z);.           
	0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x5f, 0x36, 0x30, 0x35, 0x20, 0x3e, 0x20, 0x5f, 0x36, 0x31, //  if ((_605 > _61
	0x33, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x5f, 0x36, 0x31, 0x33, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 3) || (_613 < 0.
	0x30, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0)).            
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {.              
	0x20, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, //   _897 = float2(
	0x2d, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // -1.0);.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, //           }.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x66, //         _897 = f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // ast::max(float2(
	0x5f, 0x36, 0x30, 0x35, 0x2c, 0x20, 0x5f, 0x36, 0x31, 0x33, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // _605, _613), flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // at2(0.0));.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, //       } while(fa
	0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // lse);.        fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x35, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // oat _553;.      
	0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x39, 0x30, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, //   bool _900;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x39, 0x30, 0x34, //      float2 _904
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x38, // ;.        int _8
	0x39, 0x38, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 98 = 0;.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, // float _899 = _89
	0x37, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, // 7.x;.        for
	0x20, 0x28, 0x3b, 0x3b, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //  (;;).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, //             if (
	0x5f, 0x38, 0x39, 0x38, 0x20, 0x3c, 0x20, 0x31, 0x30, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // _898 < 100).    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, //           float3
	0x20, 0x5f, 0x36, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x5f, 0x34, 0x34, 0x36, 0x20, 0x2b, //  _651 = ((_446 +
	0x20, 0x28, 0x5f, 0x34, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x39, 0x39, 0x29, 0x29, 0x20, //  (_466 * _899)) 
	0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, // - _mtl_u.boundMi
	0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // n.xyz) * _mtl_u.
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // boundRatio.xyz;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x36, // float3 _880 = _6
	0x35, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 51;.            
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x30, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //     _880.y = 1.0
	0x20, 0x2d, 0x20, 0x5f, 0x36, 0x35, 0x31, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  - _651.y;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x34, 0x20, 0x5f, 0x36, 0x36, 0x35, 0x20, 0x3d, 0x20, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, // 4 _665 = SDFSamp
	0x6c, 0x65, 0x72, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x53, 0x44, 0x46, 0x53, 0x61, // ler.sample(SDFSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x38, // mplerSampler, _8
	0x38, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 80);.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x33, 0x38, 0x20, //      float _638 
	0x3d, 0x20, 0x5f, 0x36, 0x36, 0x35, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // = _665.x;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x35, 0x33, 0x20, 0x3d, //           _553 =
	0x20, 0x5f, 0x38, 0x39, 0x39, 0x20, 0x2b, 0x20, 0x5f, 0x36, 0x33, 0x38, 0x3b, 0x0a, 0x20, 0x20, //  _899 + _638;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, //               if
	0x20, 0x28, 0x5f, 0x36, 0x33, 0x38, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x31, 0x30, 0x30, //  (_638 < 0.00100
	0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x37, 0x34, 0x39, 0x37, 0x34, 0x35, 0x31, 0x33, 0x30, 0x35, // 0000047497451305
	0x33, 0x38, 0x39, 0x34, 0x30, 0x34, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, // 389404296875).  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //               {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //     _904 = float
	0x32, 0x28, 0x5f, 0x35, 0x35, 0x33, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // 2(_553, 1.0);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x5f, 0x39, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0a, 0x20, //   _900 = true;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, //           }.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x39, //             _899
	0x20, 0x3d, 0x20, 0x5f, 0x35, 0x35, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = _553;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x38, 0x2b, 0x2b, 0x3b, //          _898++;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  continue;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x5f, //         _904 = _
	0x39, 0x30, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 907;.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x6c, 0x73, //      _900 = fals
	0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e;.             
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x39, // }.        if (_9
	0x30, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 00).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x33, 0x20, 0x3d, //           _903 =
	0x20, 0x5f, 0x39, 0x30, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _904;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x33, //   }.        _903
	0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x39, 0x39, 0x39, 0x39, 0x2e, 0x30, //  = float2(9999.0
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // , 0.0);.        
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, // break;.    } whi
	0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // le(false);.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // loat3 _908;.    
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x39, 0x30, 0x33, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x38, 0x30, 0x30, // if (_903.x < 800
	0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 0.0).    {.     
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x3d, //    float3 _479 =
	0x20, 0x5f, 0x34, 0x34, 0x36, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x34, 0x36, 0x36, 0x20, 0x2a, 0x20, //  _446 + (_466 * 
	0x5f, 0x39, 0x30, 0x33, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _903.x);.       
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x37, 0x31, 0x34, 0x20, 0x3d, 0x20, 0x28, //  float3 _714 = (
	0x5f, 0x34, 0x37, 0x39, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x6f, // _479 - _mtl_u.bo
	0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // undMin.xyz) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x2e, // tl_u.boundRatio.
	0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // xyz;.        flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x38, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x31, 0x34, 0x3b, // at3 _885 = _714;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x35, 0x2e, 0x79, 0x20, // .        _885.y 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x37, 0x31, 0x34, 0x2e, 0x79, 0x3b, 0x0a, // = 1.0 - _714.y;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, //         float3 _
	0x37, 0x35, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x2d, 0x20, 0x66, // 752 = ((_479 - f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, // loat3(0.5, 0.0, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, // 0.0)) - _mtl_u.b
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2a, 0x20, 0x5f, // oundMin.xyz) * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, // mtl_u.boundRatio
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // .xyz;.        fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x35, 0x32, // oat3 _888 = _752
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x2e, 0x79, // ;.        _888.y
	0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x37, 0x35, 0x32, 0x2e, 0x79, 0x3b, //  = 1.0 - _752.y;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // .        float3 
	0x5f, 0x37, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x2d, 0x20, // _790 = ((_479 - 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, // float3(0.0, 0.5,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, //  0.0)) - _mtl_u.
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2a, 0x20, // boundMin.xyz) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x69, // _mtl_u.boundRati
	0x6f, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // o.xyz;.        f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x39, // loat3 _891 = _79
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x2e, // 0;.        _891.
	0x79, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x37, 0x39, 0x30, 0x2e, 0x79, // y = 1.0 - _790.y
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // ;.        float3
	0x20, 0x5f, 0x38, 0x32, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x2d, //  _828 = ((_479 -
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  float3(0.0, 0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // , 0.5)) - _mtl_u
	0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2a, // .boundMin.xyz) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x61, 0x74, //  _mtl_u.boundRat
	0x69, 0x6f, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // io.xyz;.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, // float3 _894 = _8
	0x32, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x34, // 28;.        _894
	0x2e, 0x79, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x32, 0x38, 0x2e, // .y = 1.0 - _828.
	0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x20, // y;.        _908 
	0x3d, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x28, 0x66, 0x6c, 0x6f, // = normalize((flo
	0x61, 0x74, 0x34, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x28, 0x66, 0x6c, // at4(normalize(fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, // oat3(SDFSampler.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // sample(SDFSample
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x38, 0x38, 0x35, 0x29, 0x2e, // rSampler, _885).
	0x78, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x53, 0x44, 0x46, 0x53, // x) - float3(SDFS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x53, 0x44, // ampler.sample(SD
	0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // FSamplerSampler,
	0x20, 0x5f, 0x38, 0x38, 0x38, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, //  _888).x, SDFSam
	0x70, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x53, 0x44, 0x46, 0x53, // pler.sample(SDFS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // amplerSampler, _
	0x38, 0x39, 0x31, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, 0x70, 0x6c, // 891).x, SDFSampl
	0x65, 0x72, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x53, 0x44, 0x46, 0x53, 0x61, 0x6d, // er.sample(SDFSam
	0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x38, 0x39, // plerSampler, _89
	0x34, 0x29, 0x2e, 0x78, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x74, // 4).x)), 0.0) * t
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // ranspose(transpo
	0x73, 0x65, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, // se(_mtl_u.camera
	0x56, 0x69, 0x65, 0x77, 0x29, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, // View))).xyz);.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //   }.    else.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x20, //  {.        _908 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // = float3(0.0);. 
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, //    }.    out.bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, // x_FragData0 = fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x30, 0x33, 0x2c, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x2e, // oat4(_903, _908.
	0x78, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // xy);.    return 
	0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xa0, 0x00,                         // out;.}......
};
